{"version":3,"sources":["Components/Header/Header.jsx","Common/Constants.js","Components/UserInput/UserInput.jsx","Components/Message/Message.jsx","Components/Terminal/Terminal.jsx","App.js","serviceWorker.js","index.js","Common/pdfs/Matthew_Fishman_resume.pdf"],"names":["Header","className","Component","user","error","helpmsg","name","origin","degree","education","help","currentrole","resume","messages","constants","ENTER","ARROWUP","ARROWDOWN","TAB","UserInput","props","scrollToBottom","el","scrollIntoView","handleKeyDown","e","newPointer","key","inputVal","target","value","terminalHistory","state","terminalLen","length","pointer","handleMessage","refs","userinput","unshift","setState","preventDefault","message","len","inputLC","toLowerCase","replace","foundWords","i","startsWith","push","tabComplete","this","focus","ref","onKeyDown","tabIndex","type","defaultProps","LINK","Message","messagEles","messageType","map","item","href","terminal","CLEAR","LAST","INFO","RESUME","HELP","LIST","Terminal","messageState","input","found","findIndex","msgType","output","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.13dbbd48.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Header.scss';\r\n\r\n\r\nclass Header extends Component {\r\n    render(){\r\n        return(     \r\n            <div className=\"header\">\r\n                <h1>Matthew Fishman</h1>\r\n            </div>\r\n    );\r\n\r\n    }\r\n}\r\n\r\nexport default Header;","export default {\r\n    terminal:{\r\n        user        : [\"Matts-Resume-Site-Terminal:\"],\r\n        error       : [\"> Command not found. Try Again\"],\r\n        helpmsg     : [\"> Type \\\"Help\\\" for a list of recognized commands\"],\r\n        name        : [\"> Matthew B Fishman\"],\r\n        origin      : [\"> Manalapan, NJ\"],\r\n        degree      : [\"> M.S in Computer Science\", \"> B.S. in Software Engineering\"],\r\n        education   : [\"> Georgia Institute of Technology expect 2023\", \"> Quinnipiac University\"],\r\n        help        : [\"=> List of Recognized Commands:\", \"> Clear\", \"> Current Role\", \"> Degree\", \"> Education\", \"> Help\", \"> Name\", \"> Origin\", \"> Resume\"],\r\n        currentrole : [\"> Software Engineer at The Walt Disney Company since July 2018\"],\r\n        resume      : [\"> Matthew Fishman's Resume\"]      \r\n    },\r\n    messages:[\r\n        \"clear\",\r\n        \"help\",\r\n        \"name\",\r\n        \"origin\",\r\n        \"degree\",\r\n        \"education\",\r\n        \"resume\",\r\n        \"current role\"\r\n    ],\r\n    CLEAR       : 'clear',\r\n    HELP        : 'help',\r\n    LAST        : 'last',\r\n    INFO        : 'info',\r\n    LIST        : 'list',\r\n    LINK        : 'link',\r\n    RESUME      : 'resume',\r\n    ENTER       : 'Enter',\r\n    TAB         : 'Tab',\r\n    ARROWDOWN   : 'ArrowDown',\r\n    ARROWUP     : 'ArrowUp'\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport constants from '../../Common/Constants.js';\r\n\r\nvar messages    = constants.messages,\r\n    ENTER       = constants.ENTER,\r\n    ARROWUP     = constants.ARROWUP,\r\n    ARROWDOWN   = constants.ARROWDOWN,\r\n    TAB         = constants.TAB;\r\n\r\nclass UserInput extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            terminalHistory: [],\r\n            pointer: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.scrollToBottom();\r\n        this.refs.userinput.focus();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    }\r\n\r\n    scrollToBottom = () => {\r\n        this.el.scrollIntoView();\r\n    }\r\n\r\n    handleKeyDown = (e) => {\r\n        var key             = e.key, \r\n            inputVal        = e.target.value,\r\n            terminalHistory = this.state.terminalHistory,\r\n            terminalLen     = terminalHistory.length,\r\n            pointer         = this.state.pointer,\r\n            newPointer;\r\n\r\n        if(key === ENTER){\r\n            if(inputVal !== ''){\r\n                this.props.handleMessage(inputVal);\r\n                this.refs.userinput.value = '';\r\n                \r\n                if(terminalHistory[0] !== inputVal){\r\n                    terminalHistory.unshift(inputVal);\r\n                }\r\n                this.setState({\r\n                    pointer: -1,\r\n                    terminalHistory:terminalHistory\r\n                });\r\n            }\r\n        }else if(key === TAB){\r\n            e.preventDefault();\r\n            var inputLC      = inputVal.toLowerCase().replace(/ /g, \"\"),\r\n            foundWords   = [],\r\n            message, len;\r\n\r\n            for(var i = 0; i < messages.length; i++){\r\n                message = messages[i];\r\n                if(message.startsWith(inputLC)){\r\n                    foundWords.push(message);\r\n                }\r\n            }\r\n\r\n            len = foundWords.length;\r\n            if(len > 0){\r\n                if(len === 1){\r\n                    this.refs.userinput.value = foundWords[0];\r\n                }\r\n                else{\r\n                    this.props.tabComplete(foundWords);\r\n                }\r\n            }\r\n        }else if(key === ARROWUP){\r\n            newPointer = pointer + 1;\r\n            if(terminalLen > 0 && newPointer < terminalLen){\r\n                this.setState({\r\n                    pointer: newPointer\r\n                }, function(){\r\n                    this.refs.userinput.value = terminalHistory[newPointer];\r\n                });\r\n            }\r\n            e.preventDefault();\r\n        }else if(key === ARROWDOWN){\r\n            newPointer = pointer - 1;\r\n            if(pointer > 0){\r\n                this.setState({\r\n                    pointer: newPointer\r\n                }, function(){\r\n                    this.refs.userinput.value = terminalHistory[newPointer];\r\n                });\r\n\r\n            }else if(pointer === 0){\r\n                this.refs.userinput.value = '';\r\n                this.setState({\r\n                    pointer: newPointer\r\n                });\r\n            }\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        var props = this.props,\r\n            user  = props && props.user;\r\n\r\n        return (\r\n            <div className=\"user-input\">\r\n                {user}<input ref=\"userinput\" onKeyDown={this.handleKeyDown} tabIndex=\"-1\" type=\"text\"/>\r\n                <div ref={el => { this.el = el; }} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nUserInput.propTypes = {\r\n    user: PropTypes.array\r\n}\r\n\r\nUserInput.defaultProps = {\r\n    user: 'Site-Terminal',\r\n}\r\n\r\nexport default UserInput;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport constants from '../../Common/Constants.js';\r\nimport resume from '../../Common/pdfs/Matthew_Fishman_resume.pdf';\r\n\r\nvar LINK = constants.LINK;\r\n\r\n\r\nclass Message extends Component {\r\n    render(){\r\n        var props       = this.props,\r\n            messages    = props && props.messages,\r\n            messageType = props && props.messageType,\r\n            messagEles;\r\n            \r\n        if(messageType === LINK){\r\n            messagEles = messages.map((item, key) => \r\n                <a href={resume} target =\"_blank\" key={key}  className={messageType}>{item}</a>\r\n            );\r\n\r\n        } else {    \r\n            messagEles = messages.map((item, key) => \r\n                <div key={key} className={messageType}>{item}</div>\r\n            );\r\n        }\r\n\r\n\r\n\r\n\r\n        return <div className={\"message-wrapper \" + messageType}>{messagEles}</div>;\r\n    }\r\n}\r\n\r\nMessage.propTypes = {\r\n    message: PropTypes.string,\r\n    messageType: PropTypes.string\r\n}\r\n\r\n\r\nexport default Message;","import React, {Component} from 'react';\r\nimport constants from '../../Common/Constants.js';\r\nimport UserInput from '../UserInput/UserInput';\r\nimport Message from '../Message/Message';\r\nimport findIndex from 'lodash/findIndex';\r\n\r\nimport './Terminal.scss';\r\n\r\nvar terminal    = constants.terminal,\r\n    messages    = constants.messages,\r\n    user        = terminal.user,\r\n    helpmsg     = terminal.helpmsg,\r\n    error       = terminal.error,\r\n    CLEAR       = constants.CLEAR,\r\n    LAST        = constants.LAST,\r\n    INFO        = constants.INFO,\r\n    RESUME      = constants.RESUME,\r\n    LINK        = constants.LINK,\r\n    HELP        = constants.HELP,\r\n    LIST        = constants.LIST;\r\n\r\nclass Terminal extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            messages : [{\r\n                'messages': helpmsg,\r\n                'messageType': HELP\r\n            }]\r\n        }\r\n    }\r\n\r\n    tabComplete = (foundWords) => {\r\n        var messageState = this.state.messages;\r\n\r\n        messageState.push({\r\n            'messages'      : foundWords,\r\n            'messageType'   : LIST\r\n        });\r\n\r\n        this.setState({\r\n            messages: messageState\r\n        });\r\n\r\n    }\r\n\r\n    handleMessage = (input) => {\r\n        var inputLC      = input.toLowerCase().replace(/ /g, \"\"),\r\n            messageState = this.state.messages,\r\n            found        = findIndex(messages, function(message){\r\n            return message.replace(/ /g, \"\") === inputLC;\r\n        });\r\n\r\n        messageState.push({\r\n            'messages'      : [user, input],\r\n            'messageType'   : LAST\r\n        });\r\n\r\n        if(found !== -1){\r\n            if(inputLC === CLEAR){\r\n                messageState = [];            \r\n            } else {\r\n                var output  = terminal[inputLC],\r\n                    msgType;\r\n                \r\n                if(inputLC === HELP){\r\n                    msgType = INFO + '-' + HELP;\r\n                }else if(inputLC === RESUME){\r\n                    msgType = LINK;\r\n                }else{\r\n                    msgType = INFO;\r\n                }                \r\n                messageState.push({\r\n                    'messages'      : output,\r\n                    'messageType'   : msgType\r\n                });\r\n            }\r\n        }else{\r\n            messageState.push({\r\n                'messages'      : error,\r\n                'messageType'   : HELP\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            messages: messageState\r\n        });\r\n    }\r\n\r\n    render(){\r\n\r\n        var messages = this.state.messages.map((item, key) =>\r\n            <Message key={key} messages={item.messages} messageType={item.messageType}/>\r\n        );\r\n\r\n        return(     \r\n            <div className=\"terminal\">\r\n                <div className=\"terminal-frame\">\r\n                    <div className=\"expand-btn\"></div>\r\n                    <div className=\"close-btn\"></div>\r\n                </div>\r\n                <div className=\"terminal-body\">\r\n                    {messages}\r\n                    <UserInput user={user} handleMessage={this.handleMessage} tabComplete={this.tabComplete}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Terminal;","import React, {Component} from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport Terminal from './Components/Terminal/Terminal';\n\nclass App extends Component {\n    render(){\n          return( \n              <div>\n                  <Header/>\n                  <Terminal/>\n              </div>\n          );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Matthew_Fishman_resume.88f47990.pdf\";"],"sourceRoot":""}